
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 08 22:43:56 CET 2015
//----------------------------------------------------

package pl.wcislo.neo4j_sbql.result.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.DefaultSymbolFactory;
import java_cup.runtime.Symbol;
import pl.wcislo.neo4j_sbql.ast.*;
import pl.wcislo.neo4j_sbql.ast.auxname.*;
import pl.wcislo.neo4j_sbql.ast.binary.*;
import pl.wcislo.neo4j_sbql.ast.terminal.*;
import pl.wcislo.neo4j_sbql.ast.unary.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 08 22:43:56 CET 2015
  */
public class SbqlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SbqlParser() {super();}

  /** Constructor which sets the default scanner. */
  public SbqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SbqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\012\004\005\007\007\010\011\022\006\001" +
    "\002\000\004\002\036\001\002\000\030\002\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\023\ufff5\001\002\000\012\004\005\007\007" +
    "\010\011\022\006\001\002\000\030\002\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\023\ufff4\001\002\000\026\002\000\011\017\012" +
    "\012\013\015\014\013\015\022\016\020\017\021\020\016" +
    "\021\014\001\002\000\030\002\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\023\ufff6\001\002\000\012\004\005\007\007\010\011\022" +
    "\006\001\002\000\012\004\005\007\007\010\011\022\006" +
    "\001\002\000\012\004\005\007\007\010\011\022\006\001" +
    "\002\000\012\004\005\007\007\010\011\022\006\001\002" +
    "\000\012\004\005\007\007\010\011\022\006\001\002\000" +
    "\012\004\005\007\007\010\011\022\006\001\002\000\012" +
    "\004\005\007\007\010\011\022\006\001\002\000\012\004" +
    "\005\007\007\010\011\022\006\001\002\000\012\004\005" +
    "\007\007\010\011\022\006\001\002\000\030\002\ufff9\011" +
    "\017\012\012\013\015\014\013\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\023\ufff9\001\002\000\030\002\ufff7\011" +
    "\017\012\012\013\015\014\013\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\023\ufff7\001\002\000\030\002\ufffb\011" +
    "\017\012\012\013\015\014\013\015\022\016\ufffb\017\021" +
    "\020\016\021\ufffb\023\ufffb\001\002\000\030\002\uffff\011" +
    "\uffff\012\uffff\013\015\014\013\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\023\uffff\001\002\000\030\002\ufff8\011" +
    "\017\012\012\013\015\014\013\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\023\ufff8\001\002\000\030\002\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\023\ufffd\001\002\000\030\002\ufffa\011" +
    "\017\012\012\013\015\014\013\015\022\016\ufffa\017\021" +
    "\020\016\021\ufffa\023\ufffa\001\002\000\030\002\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\023\ufffc\001\002\000\030\002\ufffe\011" +
    "\ufffe\012\ufffe\013\015\014\013\015\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\023\ufffe\001\002\000\026\011\017\012" +
    "\012\013\015\014\013\015\022\016\020\017\021\020\016" +
    "\021\014\023\035\001\002\000\030\002\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\023\ufff3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\002\003\003\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\032\001\001\000\004\003\031\001\001\000\004\003\030" +
    "\001\001\000\004\003\027\001\001\000\004\003\026\001" +
    "\001\000\004\003\025\001\001\000\004\003\024\001\001" +
    "\000\004\003\023\001\001\000\004\003\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SbqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SbqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SbqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 	    lexer = new Lexer(new StringReader(expr)); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
		return lexer.next_token(); 
    }

 
	public Lexer lexer;
	private String expr;
	public Expression RESULT;
	
	public SbqlParser(String expr) {
		this.symbolFactory = new DefaultSymbolFactory();   
		this.expr = expr;
	}
	
	void setResult(Expression exp) {
		this.RESULT = exp;
	}  


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SbqlParser$actions {
  private final SbqlParser parser;

  /** Constructor */
  CUP$SbqlParser$actions(SbqlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SbqlParser$do_action(
    int                        CUP$SbqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SbqlParser$parser,
    java.util.Stack            CUP$SbqlParser$stack,
    int                        CUP$SbqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SbqlParser$result;

      /* select the action based on the action number */
      switch (CUP$SbqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		 RESULT = e1; 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new StringTerminal((String)o); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new IntegerTerminal((Integer)o); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= NAME 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new NameTerminal((String)o); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr GREATER_THAN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new GreaterThanExpression(e1, e2); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr LESS_THAN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new LessThanExpression(e1, e2); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new EqualsExpression(e1, e2); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr WHERE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new WhereExpression(e1, e2); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr DOT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new DotExpression(e1, e2); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new DivideExpression(e1, e2); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MULTIPLY expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new MultiplyExpression(e1, e2); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new MinusExpression(e1, e2); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = new PlusExpression(e1, e2); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.peek()).value;
		 RESULT = e; parser.setResult(e); 
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          return CUP$SbqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)).value;
		RESULT = start_val;
              CUP$SbqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.elementAt(CUP$SbqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SbqlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SbqlParser$parser.done_parsing();
          return CUP$SbqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

